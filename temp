
#Split data into test train

y = target
x = df

train_X, test_X, train_y, test_y = train_test_split(x, y, test_size = 0.2, random_state = 0)

#convert to values
train_X = train_X.values
test_X = test_X.values
train_y = train_y.values
test_y = test_y.values

#Change datatype to float32
train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_y = train_y.astype('float32')
test_y = test_y.astype('float32')


# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)
print(train_X[0].shape)


#Convert dataframe into values
values = df.values

# integer encode direction
encoder = LabelEncoder()
values[:,4] = encoder.fit_transform(values[:,4])
# ensure all data is float
values = values.astype('float32')



# frame as supervised learning
reframed = series_to_supervised(values, 1, 1)
print(reframed.head())

values = reframed.values



def matthews_correlation(inv_y, inv_yhat):
    '''Calculates the Matthews correlation coefficient measure for quality
    of binary classification problems.
    '''
    inv_yhat = tf.convert_to_tensor(inv_yhat, np.float32)
    inv_y = tf.convert_to_tensor(inv_y, np.float32)
    
    y_pred_pos = K.round(K.clip(inv_yhat, 0, 1))
    y_pred_neg = 1 - y_pred_pos

    y_pos = K.round(K.clip(inv_y, 0, 1))
    y_neg = 1 - y_pos

    tp = K.sum(y_pos * y_pred_pos)
    tn = K.sum(y_neg * y_pred_neg)

    fp = K.sum(y_neg * y_pred_pos)
    fn = K.sum(y_pos * y_pred_neg)

    numerator = (tp * tn - fp * fn)
    denominator = K.sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))

    return numerator / (denominator + K.epsilon())
    
    
    
    
# design network
model = Sequential()
model.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam', metrics=[matthews_correlation])
# fit network
history = model.fit(train_X, train_y, epochs=50, batch_size=72, validation_data=(test_X, test_y), verbose=2, shuffle=False)
# plot history
